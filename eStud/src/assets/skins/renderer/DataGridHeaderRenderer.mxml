<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer minWidth="21" minHeight="21"
					xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" >
	
	<fx:Declarations>
		<fx:Component id="defaultSortIndicator">
			<s:Path data="M 3.5 7.0 L 0.0 0.0 L 7.0 0.0 L 3.5 7.0" implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 *  @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const color:uint = dataGrid.getStyle("symbolColor");
							arrowFill1.color = color;
							arrowFill2.color = color;
						}
					]]>
				</fx:Script>
				
				<s:fill>
					<s:RadialGradient rotation="90" focalPointRatio="1">    
						<!--- @private -->
						<s:GradientEntry id="arrowFill1" color="0" alpha="0.6" />
						<!--- @private -->
						<s:GradientEntry id="arrowFill2" color="0" alpha="0.8" />
					</s:RadialGradient>
				</s:fill>
			</s:Path>
		</fx:Component>
		<s:Label id="labelDisplay" 
				 verticalCenter="1" left="0" right="0" top="0" bottom="0"
				 textAlign="start"
				 fontWeight="bold"
				 verticalAlign="middle"
				 maxDisplayedLines="1"
				 showTruncationTip="true" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import spark.components.gridClasses.IGridVisualElement;
			import mx.core.IVisualElement;
			
			import spark.components.DataGrid;
			import spark.components.GridColumnHeaderGroup;
			import spark.components.gridClasses.GridColumn;
			
			/**
			 *  @private
			 */
			private function dispatchChangeEvent(type:String):void
			{
				if (hasEventListener(type))
					dispatchEvent(new Event(type));
			}            
			
			//----------------------------------
			//  maxDisplayedLines
			//----------------------------------
			
			private var _maxDisplayedLines:int = 1;
			
			[Bindable("maxDisplayedLinesChanged")]
			[Inspectable(minValue="-1")]
			
			public function get maxDisplayedLines():int
			{
				return _maxDisplayedLines;
			}
			
			/**
			 *  @private
			 */
			public function set maxDisplayedLines(value:int):void
			{
				if (value == _maxDisplayedLines)
					return;
				
				_maxDisplayedLines = value;
				if (labelDisplay)
					labelDisplay.maxDisplayedLines = value;
				
				invalidateSize();
				invalidateDisplayList();
				
				dispatchChangeEvent("maxDisplayedLinesChanged");
			}
			
			//----------------------------------
			//  sortIndicator
			//----------------------------------
			
			private var _sortIndicator:IFactory;
			private var sortIndicatorInstance:IVisualElement;
			
			[Bindable("sortIndicatorChanged")]
			
			public function get sortIndicator():IFactory
			{
				return (_sortIndicator) ? _sortIndicator : defaultSortIndicator;
			}
			
			/**
			 *  @private
			 */
			public function set sortIndicator(value:IFactory):void
			{
				if (_sortIndicator == value)
					return;
				
				_sortIndicator = value;
				if (sortIndicatorInstance)
				{
					sortIndicatorGroup.includeInLayout = false;
					sortIndicatorGroup.removeElement(sortIndicatorInstance);
					sortIndicatorInstance = null;
				}
				
				invalidateDisplayList();
				dispatchChangeEvent("sortIndicatorChanged");
			}
			override public function prepare(hasBeenRecycled:Boolean):void
			{
				super.prepare(hasBeenRecycled);
				
				if (labelDisplay && labelDisplayGroup && (labelDisplay.parent != labelDisplayGroup))
				{
					labelDisplayGroup.removeAllElements();
					labelDisplayGroup.addElement(labelDisplay);
				}
				
				const column:GridColumn = this.column;
				if (sortIndicator && column && column.grid && column.grid.dataGrid && column.grid.dataGrid.columnHeaderGroup)
				{
					const dataGrid:DataGrid = column.grid.dataGrid;
					const columnHeaderGroup:GridColumnHeaderGroup = dataGrid.columnHeaderGroup;
					
					if (columnHeaderGroup.isSortIndicatorVisible(column.columnIndex))
					{
						if (!sortIndicatorInstance)
						{
							sortIndicatorInstance = sortIndicator.newInstance();
							sortIndicatorGroup.addElement(sortIndicatorInstance);
						}
						
						// Initialize sortIndicator
						sortIndicatorInstance.visible = true;
						const gridVisualElement:IGridVisualElement = sortIndicatorInstance as IGridVisualElement;
						if (gridVisualElement)
							gridVisualElement.prepareGridVisualElement(column.grid, -1, column.columnIndex);
						
						sortIndicatorGroup.includeInLayout = true;
						sortIndicatorGroup.scaleY = (column.sortDescending) ? 1 : -1;
					}
					else
					{
						if (sortIndicatorInstance)
						{
							sortIndicatorGroup.removeElement(sortIndicatorInstance);
							sortIndicatorGroup.includeInLayout = false;
							sortIndicatorInstance = null;
						}
					}
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="down" />
	</s:states>      
	
	<s:Rect id="fill" left="0" right="0" top="0" bottom="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x585c63" 
								 color.hovered="0x2a2f37" 
								 color.down="0x12151a" 
								 alpha="0.85" />
				<s:GradientEntry color="0x343a3f" 
								 color.hovered="0x0a0a0b" 
								 color.down="0x07080d" 
								 alpha="0.85" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:BorderContainer height="21" right="0" left="0" blendMode="color" borderAlpha="0"/>
	 
	<s:HGroup left="7" right="7" top="5" bottom="5" gap="2" verticalAlign="middle">
		<s:Group id="labelDisplayGroup" width="100%" />
		<s:Group id="sortIndicatorGroup" includeInLayout="false" />
	</s:HGroup>
	
</s:GridItemRenderer>